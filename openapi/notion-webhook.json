{
  "info": {
    "contact": {
      "email": "support@example.com"
    },
    "description": "Modified to support n8n Webhook parsing. All parameters are wrapped in a 'body' object.",
    "title": "Notion Custom API (Body Nested)",
    "version": "1.0.2"
  },
  "openapi": "3.1.0",
  "paths": {
    "/appendBlockChildren/{id}": {
      "patch": {
        "description": "Append one or more blocks to an existing container block.",
        "operationId": "appendBlockChildren",
        "parameters": [
          {
            "description": "ID of the block to append children to",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "properties": {
                      "after": {
                        "description": "ID of an existing child to insert after",
                        "type": "string"
                      },
                      "children": {
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "children"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "body"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated block info"
          },
          "400": {
            "description": "Invalid request"
          }
        },
        "summary": "Append block children",
        "x-openai-isConsequential": false,
        "x-openai-requiresUserConfirmation": false
      }
    },
    "/createDatabase/{id}": {
      "post": {
        "description": "Create a new database under a parent page.",
        "operationId": "createDatabase",
        "parameters": [
          {
            "description": "ID of the parent page for the new database",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "properties": {
                      "properties": {
                        "type": "object"
                      },
                      "title": {
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "title",
                      "properties"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "body"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created database details"
          },
          "400": {
            "description": "Invalid request"
          }
        },
        "summary": "Create a database",
        "x-openai-isConsequential": false,
        "x-openai-requiresUserConfirmation": false
      }
    },
    "/createPage/{id}": {
      "post": {
        "operationId": "createPage",
        "parameters": [
          {
            "description": "ID of the target database for the new page",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "properties": {
                      "children": {
                        "description": "Optional array of block children to include under the page",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "properties": {
                        "description": "Mapping of database property names to values for the new page",
                        "type": "object"
                      }
                    },
                    "required": [
                      "properties"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "body"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created page details"
          },
          "400": {
            "description": "Invalid request"
          }
        },
        "summary": "Create a Notion-style page in a database (nested under 'body')",
        "x-openai-isConsequential": false,
        "x-openai-requiresUserConfirmation": false
      }
    },
    "/deleteBlock/{id}": {
      "delete": {
        "description": "Move a block to the trash in Notion.",
        "operationId": "deleteBlock",
        "parameters": [
          {
            "description": "ID of the block to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion acknowledged"
          },
          "400": {
            "description": "Invalid id"
          }
        },
        "summary": "Delete a block",
        "x-openai-isConsequential": false,
        "x-openai-requiresUserConfirmation": false
      }
    },
    "/getBlock/{id}": {
      "get": {
        "operationId": "getBlock",
        "parameters": [
          {
            "description": "ID of the block to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Block details"
          },
          "400": {
            "description": "Invalid id"
          }
        },
        "summary": "Retrieve a block by ID",
        "x-openai-isConsequential": false,
        "x-openai-requiresUserConfirmation": false
      }
    },
    "/getBlockChildren/{id}": {
      "get": {
        "operationId": "getBlockChildren",
        "parameters": [
          {
            "description": "ID of the parent block",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Child blocks list"
          },
          "400": {
            "description": "Invalid id"
          }
        },
        "summary": "Retrieve block children",
        "x-openai-isConsequential": false,
        "x-openai-requiresUserConfirmation": false
      }
    },
    "/getDB/{id}": {
      "get": {
        "operationId": "getDB",
        "parameters": [
          {
            "description": "ID of the database to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Database details"
          },
          "400": {
            "description": "Invalid id or structure"
          }
        },
        "summary": "Retrieve a Notion-style database by ID",
        "x-openai-isConsequential": false,
        "x-openai-requiresUserConfirmation": false
      }
    },
    "/getPage/{id}": {
      "get": {
        "operationId": "getPage",
        "parameters": [
          {
            "description": "ID of the page to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page details"
          },
          "400": {
            "description": "Invalid id"
          }
        },
        "summary": "Retrieve a page by ID",
        "x-openai-isConsequential": false,
        "x-openai-requiresUserConfirmation": false
      }
    },
    "/queryDB/{id}": {
      "post": {
        "operationId": "queryDB",
        "parameters": [
          {
            "description": "ID of the database to query",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "properties": {
                      "filter": {
                        "description": "Compound filter using and/or logic",
                        "example": {
                          "or": [
                            {
                              "property": "In stock",
                              "checkbox": {
                                "equals": true
                              }
                            },
                            {
                              "property": "Cost of next trip",
                              "number": {
                                "greater_than_or_equal_to": 2
                              }
                            }
                          ]
                        },
                        "properties": {
                          "and": {
                            "items": {
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "checkbox": {
                            "properties": {
                              "does_not_equal": {
                                "type": "boolean"
                              },
                              "equals": {
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "number": {
                            "properties": {
                              "does_not_equal": {
                                "type": "number"
                              },
                              "equals": {
                                "type": "number"
                              },
                              "greater_than": {
                                "type": "number"
                              },
                              "greater_than_or_equal_to": {
                                "type": "number"
                              },
                              "less_than": {
                                "type": "number"
                              },
                              "less_than_or_equal_to": {
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "or": {
                            "items": {
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "property": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "page_size": {
                        "default": 100,
                        "maximum": 100,
                        "type": "integer"
                      },
                      "sorts": {
                        "items": {
                          "properties": {
                            "direction": {
                              "enum": [
                                "ascending",
                                "descending"
                              ],
                              "type": "string"
                            },
                            "property": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "start_cursor": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "body"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "has_more": {
                      "type": "boolean"
                    },
                      "next_cursor": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      },
                    "results": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Query results"
          },
          "400": {
            "description": "Invalid request or structure"
          }
        },
        "summary": "Query a Notion-style database (nested under 'body')",
        "x-openai-isConsequential": false,
        "x-openai-requiresUserConfirmation": false
      }
    },
    "/search": {
      "post": {
        "operationId": "search",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "properties": {
                      "query": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "body"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Search results"
          },
          "400": {
            "description": "Invalid request"
          }
        },
        "summary": "Search pages and databases",
        "x-openai-isConsequential": false,
        "x-openai-requiresUserConfirmation": false
      }
    },
    "/updateBlock/{id}": {
      "patch": {
        "operationId": "updateBlock",
        "parameters": [
          {
            "description": "ID of the block to update",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "properties": {
                      "archived": {
                        "type": "boolean"
                      },
                      "type": {
                        "enum": [
                          "text",
                          "to_do"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "body"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated block"
          },
          "400": {
            "description": "Invalid request"
          }
        },
        "summary": "Update a block",
        "x-openai-isConsequential": false,
        "x-openai-requiresUserConfirmation": false
      }
    },
    "/updateDatabase/{id}": {
      "patch": {
        "operationId": "updateDatabase",
        "parameters": [
          {
            "description": "ID of the database to update",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "properties": {
                      "properties": {
                        "type": "object"
                      },
                      "title": {
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "body"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated database"
          },
          "400": {
            "description": "Invalid request"
          }
        },
        "summary": "Update a database",
        "x-openai-isConsequential": false,
        "x-openai-requiresUserConfirmation": false
      }
    },
    "/updatePage/{id}": {
      "patch": {
        "operationId": "updatePage",
        "parameters": [
          {
            "description": "ID of the page to update",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "body": {
                    "properties": {
                      "archived": {
                        "type": "boolean"
                      },
                      "properties": {
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "body"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated page"
          },
          "400": {
            "description": "Invalid request"
          }
        },
        "summary": "Update a page",
        "x-openai-isConsequential": false,
        "x-openai-requiresUserConfirmation": false
      }
    }
  },
  "servers": [
    {
      "description": "Main API server",
      "url": "https://n8n.qylab.kr/webhook"
    }
  ]
}
